# $ golangci-lint run --config=~/.golangci.yml ./... > lint.txt

run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 7m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|vendor|mod

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true

linters:
  enable:
    # Enabled by default linters:
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - gosimple # Linter for Go source code that specializes in simplifying code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint.
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # Checks Go code for unused constants, variables, functions and types

    # Disabled by default linters:
    - bodyclose # checks whether HTTP response body is closed successfully
    - durationcheck # : check for two durations multiplied together [fast: false, auto-fix: false]
    - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - copyloopvar # checks for pointers to enclosing loop variables
    - forcetypeassert # finds forced type assertions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues.
    - goimports # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - err113 # Golang linter to check the errors handling expressions
    - mnd # An analyzer to detect magic numbers.
    - gosec # Inspects source code for security problems
    - ireturn # Accept Interfaces, Return Concrete Types
    - importas # Enforces consistent import aliases
    - makezero # Finds slice declarations with non-zero initial length
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - nolintlint # Reports ill-formed or insufficient nolint directives
    - prealloc # Finds slice declarations that could potentially be pre-allocated
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - promlinter # Check Prometheus metrics naming via promlint
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - stylecheck # Stylecheck is a replacement for golint
    - misspell # Finds commonly misspelled English words in comments
    - unparam # Reports unused function parameters
    - unconvert # Remove unnecessary type conversions
    - whitespace # Tool for detection of leading and trailing whitespace
  disable:
    - godot # Check if comments end in a period
    - asasalint # check for pass []any as any in variadic func(...any)
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    - containedctx # containedctx is a linter that detects struct contained context.Context field
    - contextcheck # check the function whether use a non-inherited context
    - cyclop # checks function and package cyclomatic complexity
    - decorder # check declaration order and count of types, constants, variables and functions
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - exhaustive # check exhaustiveness of enum switch statements
    - exhaustruct # Checks if all structure fields are initialized
    - forbidigo # Forbids identifiers
    - funlen # Tool for detection of long functions
    - gci # Gci controls golang package import order and makes it always deterministic.
    - gochecknoglobals # check that no global variables exist
    - gochecknoinits # Checks that no init functions are present in Go code
    - gocognit # Computes and checks the cognitive complexity of functions
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    - goheader # Checks is file header matches to pattern
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt # Gofumpt checks whether code was gofumpt-ed.
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with f at the end
    - grouper # An analyzer to analyze expression groups.
    - interfacebloat # A linter that checks the number of methods inside an interface.
    - lll # Reports long lines
    - maintidx # maintidx measures the maintainability index of each function.
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value.
    - nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity
    - noctx # noctx finds sending http request without context.Context
    - nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    - paralleltest # paralleltest detects missing usage of t.Parallel() method in your Go test
    - reassign # Checks that package variables are not reassigned
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - tagliatelle # Checks the struct tags.
    - tenv # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testpackage # linter that makes you use a separate _test package
    - thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library.
    - varnamelen # checks that the length of a variable's name matches its scope
    - wastedassign # wastedassign finds wasted assignment statements.
    - wrapcheck # Checks that errors returned from external packages are wrapped
    - wsl # Whitespace Linter - Forces you to use empty lines!

output:
  # print lines of code with issue, default is true
  print-issued-lines: false

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  # uniq-by-line: true

  # add a prefix to the output file references; default is no prefix
  # path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: false

# all available settings of specific linters
linters-settings:

  dupl:
    threshold: 100

  goconst:
    min-len:         2
    min-occurrences: 2

  errcheck:
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)
      - (io.ReadCloser).Close

  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    disabled-checks:
      - importShadow
      - emptyStringTest
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style

  revive:
    rules:
      - name: package-comments
        severity: warning
        disabled: true

issues:
  exclude-use-default: true
  exclude-dirs-use-default: true
  exclude-dirs:
    - doc
    - docker
  exclude-files:
    - \.pb\.go$
    - \.pb\.gw\.go$
  exclude-rules:
    - linters:
        - govet
      text: "declaration of \"err\" shadows declaration"
    - linters:
        - err113
      text: "do not define dynamic errors, use wrapped static errors instead"
