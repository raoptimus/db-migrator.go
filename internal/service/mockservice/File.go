// Code generated by mockery. DO NOT EDIT.

package mockservice

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

type File_Expecter struct {
	mock *mock.Mock
}

func (_m *File) EXPECT() *File_Expecter {
	return &File_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: fileName
func (_m *File) Exists(fileName string) (bool, error) {
	ret := _m.Called(fileName)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type File_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - fileName string
func (_e *File_Expecter) Exists(fileName interface{}) *File_Exists_Call {
	return &File_Exists_Call{Call: _e.mock.On("Exists", fileName)}
}

func (_c *File_Exists_Call) Run(run func(fileName string)) *File_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *File_Exists_Call) Return(_a0 bool, _a1 error) *File_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_Exists_Call) RunAndReturn(run func(string) (bool, error)) *File_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: filename
func (_m *File) Open(filename string) (io.ReadCloser, error) {
	ret := _m.Called(filename)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type File_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - filename string
func (_e *File_Expecter) Open(filename interface{}) *File_Open_Call {
	return &File_Open_Call{Call: _e.mock.On("Open", filename)}
}

func (_c *File_Open_Call) Run(run func(filename string)) *File_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *File_Open_Call) Return(_a0 io.ReadCloser, _a1 error) *File_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_Open_Call) RunAndReturn(run func(string) (io.ReadCloser, error)) *File_Open_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAll provides a mock function with given fields: filename
func (_m *File) ReadAll(filename string) ([]byte, error) {
	ret := _m.Called(filename)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type File_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
//   - filename string
func (_e *File_Expecter) ReadAll(filename interface{}) *File_ReadAll_Call {
	return &File_ReadAll_Call{Call: _e.mock.On("ReadAll", filename)}
}

func (_c *File_ReadAll_Call) Run(run func(filename string)) *File_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *File_ReadAll_Call) Return(_a0 []byte, _a1 error) *File_ReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_ReadAll_Call) RunAndReturn(run func(string) ([]byte, error)) *File_ReadAll_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFile interface {
	mock.TestingT
	Cleanup(func())
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFile(t mockConstructorTestingTNewFile) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
