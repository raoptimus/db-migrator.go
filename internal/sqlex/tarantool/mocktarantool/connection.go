// Code generated by mockery. DO NOT EDIT.

package mocktarantool

import (
	mock "github.com/stretchr/testify/mock"

	v2 "github.com/tarantool/go-tarantool/v2"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Connection) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Connection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Connection_Expecter) Close() *Connection_Close_Call {
	return &Connection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Connection_Close_Call) Run(run func()) *Connection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Close_Call) Return(_a0 error) *Connection_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Close_Call) RunAndReturn(run func() error) *Connection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function with given fields: req
func (_m *Connection) Do(req v2.Request) *v2.Future {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *v2.Future
	if rf, ok := ret.Get(0).(func(v2.Request) *v2.Future); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Future)
		}
	}

	return r0
}

// Connection_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type Connection_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - req v2.Request
func (_e *Connection_Expecter) Do(req interface{}) *Connection_Do_Call {
	return &Connection_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *Connection_Do_Call) Run(run func(req v2.Request)) *Connection_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v2.Request))
	})
	return _c
}

func (_c *Connection_Do_Call) Return(_a0 *v2.Future) *Connection_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Do_Call) RunAndReturn(run func(v2.Request) *v2.Future) *Connection_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewStream provides a mock function with no fields
func (_m *Connection) NewStream() (*v2.Stream, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewStream")
	}

	var r0 *v2.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func() (*v2.Stream, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *v2.Stream); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_NewStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStream'
type Connection_NewStream_Call struct {
	*mock.Call
}

// NewStream is a helper method to define mock.On call
func (_e *Connection_Expecter) NewStream() *Connection_NewStream_Call {
	return &Connection_NewStream_Call{Call: _e.mock.On("NewStream")}
}

func (_c *Connection_NewStream_Call) Run(run func()) *Connection_NewStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_NewStream_Call) Return(_a0 *v2.Stream, _a1 error) *Connection_NewStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_NewStream_Call) RunAndReturn(run func() (*v2.Stream, error)) *Connection_NewStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
