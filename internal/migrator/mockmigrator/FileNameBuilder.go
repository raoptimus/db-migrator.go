// Code generated by mockery. DO NOT EDIT.

package mockmigrator

import mock "github.com/stretchr/testify/mock"

// FileNameBuilder is an autogenerated mock type for the FileNameBuilder type
type FileNameBuilder struct {
	mock.Mock
}

type FileNameBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *FileNameBuilder) EXPECT() *FileNameBuilder_Expecter {
	return &FileNameBuilder_Expecter{mock: &_m.Mock}
}

// Down provides a mock function with given fields: version, forceSafely
func (_m *FileNameBuilder) Down(version string, forceSafely bool) (string, bool) {
	ret := _m.Called(version, forceSafely)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, bool) (string, bool)); ok {
		return rf(version, forceSafely)
	}
	if rf, ok := ret.Get(0).(func(string, bool) string); ok {
		r0 = rf(version, forceSafely)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, bool) bool); ok {
		r1 = rf(version, forceSafely)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// FileNameBuilder_Down_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Down'
type FileNameBuilder_Down_Call struct {
	*mock.Call
}

// Down is a helper method to define mock.On call
//   - version string
//   - forceSafely bool
func (_e *FileNameBuilder_Expecter) Down(version interface{}, forceSafely interface{}) *FileNameBuilder_Down_Call {
	return &FileNameBuilder_Down_Call{Call: _e.mock.On("Down", version, forceSafely)}
}

func (_c *FileNameBuilder_Down_Call) Run(run func(version string, forceSafely bool)) *FileNameBuilder_Down_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *FileNameBuilder_Down_Call) Return(fname string, safely bool) *FileNameBuilder_Down_Call {
	_c.Call.Return(fname, safely)
	return _c
}

func (_c *FileNameBuilder_Down_Call) RunAndReturn(run func(string, bool) (string, bool)) *FileNameBuilder_Down_Call {
	_c.Call.Return(run)
	return _c
}

// Up provides a mock function with given fields: version, forceSafely
func (_m *FileNameBuilder) Up(version string, forceSafely bool) (string, bool) {
	ret := _m.Called(version, forceSafely)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, bool) (string, bool)); ok {
		return rf(version, forceSafely)
	}
	if rf, ok := ret.Get(0).(func(string, bool) string); ok {
		r0 = rf(version, forceSafely)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, bool) bool); ok {
		r1 = rf(version, forceSafely)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// FileNameBuilder_Up_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Up'
type FileNameBuilder_Up_Call struct {
	*mock.Call
}

// Up is a helper method to define mock.On call
//   - version string
//   - forceSafely bool
func (_e *FileNameBuilder_Expecter) Up(version interface{}, forceSafely interface{}) *FileNameBuilder_Up_Call {
	return &FileNameBuilder_Up_Call{Call: _e.mock.On("Up", version, forceSafely)}
}

func (_c *FileNameBuilder_Up_Call) Run(run func(version string, forceSafely bool)) *FileNameBuilder_Up_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *FileNameBuilder_Up_Call) Return(fname string, safely bool) *FileNameBuilder_Up_Call {
	_c.Call.Return(fname, safely)
	return _c
}

func (_c *FileNameBuilder_Up_Call) RunAndReturn(run func(string, bool) (string, bool)) *FileNameBuilder_Up_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFileNameBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileNameBuilder creates a new instance of FileNameBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileNameBuilder(t mockConstructorTestingTNewFileNameBuilder) *FileNameBuilder {
	mock := &FileNameBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
