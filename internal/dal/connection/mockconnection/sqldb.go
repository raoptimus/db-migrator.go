// Code generated by mockery. DO NOT EDIT.

package mockconnection

import (
	context "context"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	sqlex "github.com/raoptimus/db-migrator.go/internal/sqlex"
)

// SQLDB is an autogenerated mock type for the SQLDB type
type SQLDB struct {
	mock.Mock
}

type SQLDB_Expecter struct {
	mock *mock.Mock
}

func (_m *SQLDB) EXPECT() *SQLDB_Expecter {
	return &SQLDB_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *SQLDB) BeginTx(ctx context.Context, opts *sql.TxOptions) (sqlex.Tx, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 sqlex.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (sqlex.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) sqlex.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlex.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDB_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type SQLDB_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *sql.TxOptions
func (_e *SQLDB_Expecter) BeginTx(ctx interface{}, opts interface{}) *SQLDB_BeginTx_Call {
	return &SQLDB_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx, opts)}
}

func (_c *SQLDB_BeginTx_Call) Run(run func(ctx context.Context, opts *sql.TxOptions)) *SQLDB_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *SQLDB_BeginTx_Call) Return(_a0 sqlex.Tx, _a1 error) *SQLDB_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDB_BeginTx_Call) RunAndReturn(run func(context.Context, *sql.TxOptions) (sqlex.Tx, error)) *SQLDB_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *SQLDB) ExecContext(ctx context.Context, query string, args ...any) (sqlex.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 sqlex.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) (sqlex.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) sqlex.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlex.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDB_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type SQLDB_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *SQLDB_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *SQLDB_ExecContext_Call {
	return &SQLDB_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *SQLDB_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...any)) *SQLDB_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLDB_ExecContext_Call) Return(_a0 sqlex.Result, _a1 error) *SQLDB_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDB_ExecContext_Call) RunAndReturn(run func(context.Context, string, ...any) (sqlex.Result, error)) *SQLDB_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with no fields
func (_m *SQLDB) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SQLDB_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type SQLDB_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *SQLDB_Expecter) Ping() *SQLDB_Ping_Call {
	return &SQLDB_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *SQLDB_Ping_Call) Run(run func()) *SQLDB_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SQLDB_Ping_Call) Return(_a0 error) *SQLDB_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQLDB_Ping_Call) RunAndReturn(run func() error) *SQLDB_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *SQLDB) QueryContext(ctx context.Context, query string, args ...any) (sqlex.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 sqlex.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) (sqlex.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) sqlex.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlex.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLDB_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type SQLDB_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *SQLDB_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *SQLDB_QueryContext_Call {
	return &SQLDB_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *SQLDB_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...any)) *SQLDB_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLDB_QueryContext_Call) Return(_a0 sqlex.Rows, _a1 error) *SQLDB_QueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLDB_QueryContext_Call) RunAndReturn(run func(context.Context, string, ...any) (sqlex.Rows, error)) *SQLDB_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewSQLDB creates a new instance of SQLDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQLDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQLDB {
	mock := &SQLDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
