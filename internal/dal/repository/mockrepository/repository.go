// Code generated by mockery. DO NOT EDIT.

package mockrepository

import (
	context "context"

	entity "github.com/raoptimus/db-migrator.go/internal/dal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateMigrationHistoryTable provides a mock function with given fields: ctx
func (_m *Repository) CreateMigrationHistoryTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateMigrationHistoryTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateMigrationHistoryTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMigrationHistoryTable'
type Repository_CreateMigrationHistoryTable_Call struct {
	*mock.Call
}

// CreateMigrationHistoryTable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) CreateMigrationHistoryTable(ctx interface{}) *Repository_CreateMigrationHistoryTable_Call {
	return &Repository_CreateMigrationHistoryTable_Call{Call: _e.mock.On("CreateMigrationHistoryTable", ctx)}
}

func (_c *Repository_CreateMigrationHistoryTable_Call) Run(run func(ctx context.Context)) *Repository_CreateMigrationHistoryTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_CreateMigrationHistoryTable_Call) Return(_a0 error) *Repository_CreateMigrationHistoryTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateMigrationHistoryTable_Call) RunAndReturn(run func(context.Context) error) *Repository_CreateMigrationHistoryTable_Call {
	_c.Call.Return(run)
	return _c
}

// DropMigrationHistoryTable provides a mock function with given fields: ctx
func (_m *Repository) DropMigrationHistoryTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DropMigrationHistoryTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DropMigrationHistoryTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropMigrationHistoryTable'
type Repository_DropMigrationHistoryTable_Call struct {
	*mock.Call
}

// DropMigrationHistoryTable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) DropMigrationHistoryTable(ctx interface{}) *Repository_DropMigrationHistoryTable_Call {
	return &Repository_DropMigrationHistoryTable_Call{Call: _e.mock.On("DropMigrationHistoryTable", ctx)}
}

func (_c *Repository_DropMigrationHistoryTable_Call) Run(run func(ctx context.Context)) *Repository_DropMigrationHistoryTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_DropMigrationHistoryTable_Call) Return(_a0 error) *Repository_DropMigrationHistoryTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DropMigrationHistoryTable_Call) RunAndReturn(run func(context.Context) error) *Repository_DropMigrationHistoryTable_Call {
	_c.Call.Return(run)
	return _c
}

// ExecQuery provides a mock function with given fields: ctx, query, args
func (_m *Repository) ExecQuery(ctx context.Context, query string, args ...any) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...any) error); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_ExecQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecQuery'
type Repository_ExecQuery_Call struct {
	*mock.Call
}

// ExecQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *Repository_Expecter) ExecQuery(ctx interface{}, query interface{}, args ...interface{}) *Repository_ExecQuery_Call {
	return &Repository_ExecQuery_Call{Call: _e.mock.On("ExecQuery",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Repository_ExecQuery_Call) Run(run func(ctx context.Context, query string, args ...any)) *Repository_ExecQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Repository_ExecQuery_Call) Return(_a0 error) *Repository_ExecQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_ExecQuery_Call) RunAndReturn(run func(context.Context, string, ...any) error) *Repository_ExecQuery_Call {
	_c.Call.Return(run)
	return _c
}

// ExecQueryTransaction provides a mock function with given fields: ctx, fnTx
func (_m *Repository) ExecQueryTransaction(ctx context.Context, fnTx func(context.Context) error) error {
	ret := _m.Called(ctx, fnTx)

	if len(ret) == 0 {
		panic("no return value specified for ExecQueryTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fnTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_ExecQueryTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecQueryTransaction'
type Repository_ExecQueryTransaction_Call struct {
	*mock.Call
}

// ExecQueryTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fnTx func(context.Context) error
func (_e *Repository_Expecter) ExecQueryTransaction(ctx interface{}, fnTx interface{}) *Repository_ExecQueryTransaction_Call {
	return &Repository_ExecQueryTransaction_Call{Call: _e.mock.On("ExecQueryTransaction", ctx, fnTx)}
}

func (_c *Repository_ExecQueryTransaction_Call) Run(run func(ctx context.Context, fnTx func(context.Context) error)) *Repository_ExecQueryTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *Repository_ExecQueryTransaction_Call) Return(_a0 error) *Repository_ExecQueryTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_ExecQueryTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *Repository_ExecQueryTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsMigration provides a mock function with given fields: ctx, version
func (_m *Repository) ExistsMigration(ctx context.Context, version string) (bool, error) {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for ExistsMigration")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ExistsMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsMigration'
type Repository_ExistsMigration_Call struct {
	*mock.Call
}

// ExistsMigration is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
func (_e *Repository_Expecter) ExistsMigration(ctx interface{}, version interface{}) *Repository_ExistsMigration_Call {
	return &Repository_ExistsMigration_Call{Call: _e.mock.On("ExistsMigration", ctx, version)}
}

func (_c *Repository_ExistsMigration_Call) Run(run func(ctx context.Context, version string)) *Repository_ExistsMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_ExistsMigration_Call) Return(_a0 bool, _a1 error) *Repository_ExistsMigration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ExistsMigration_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Repository_ExistsMigration_Call {
	_c.Call.Return(run)
	return _c
}

// HasMigrationHistoryTable provides a mock function with given fields: ctx
func (_m *Repository) HasMigrationHistoryTable(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HasMigrationHistoryTable")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_HasMigrationHistoryTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasMigrationHistoryTable'
type Repository_HasMigrationHistoryTable_Call struct {
	*mock.Call
}

// HasMigrationHistoryTable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) HasMigrationHistoryTable(ctx interface{}) *Repository_HasMigrationHistoryTable_Call {
	return &Repository_HasMigrationHistoryTable_Call{Call: _e.mock.On("HasMigrationHistoryTable", ctx)}
}

func (_c *Repository_HasMigrationHistoryTable_Call) Run(run func(ctx context.Context)) *Repository_HasMigrationHistoryTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_HasMigrationHistoryTable_Call) Return(exists bool, err error) *Repository_HasMigrationHistoryTable_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *Repository_HasMigrationHistoryTable_Call) RunAndReturn(run func(context.Context) (bool, error)) *Repository_HasMigrationHistoryTable_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMigration provides a mock function with given fields: ctx, version
func (_m *Repository) InsertMigration(ctx context.Context, version string) error {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for InsertMigration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_InsertMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMigration'
type Repository_InsertMigration_Call struct {
	*mock.Call
}

// InsertMigration is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
func (_e *Repository_Expecter) InsertMigration(ctx interface{}, version interface{}) *Repository_InsertMigration_Call {
	return &Repository_InsertMigration_Call{Call: _e.mock.On("InsertMigration", ctx, version)}
}

func (_c *Repository_InsertMigration_Call) Run(run func(ctx context.Context, version string)) *Repository_InsertMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_InsertMigration_Call) Return(_a0 error) *Repository_InsertMigration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_InsertMigration_Call) RunAndReturn(run func(context.Context, string) error) *Repository_InsertMigration_Call {
	_c.Call.Return(run)
	return _c
}

// Migrations provides a mock function with given fields: ctx, limit
func (_m *Repository) Migrations(ctx context.Context, limit int) (entity.Migrations, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for Migrations")
	}

	var r0 entity.Migrations
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Migrations, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Migrations); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Migrations)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Migrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrations'
type Repository_Migrations_Call struct {
	*mock.Call
}

// Migrations is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *Repository_Expecter) Migrations(ctx interface{}, limit interface{}) *Repository_Migrations_Call {
	return &Repository_Migrations_Call{Call: _e.mock.On("Migrations", ctx, limit)}
}

func (_c *Repository_Migrations_Call) Run(run func(ctx context.Context, limit int)) *Repository_Migrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Repository_Migrations_Call) Return(_a0 entity.Migrations, _a1 error) *Repository_Migrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Migrations_Call) RunAndReturn(run func(context.Context, int) (entity.Migrations, error)) *Repository_Migrations_Call {
	_c.Call.Return(run)
	return _c
}

// MigrationsCount provides a mock function with given fields: ctx
func (_m *Repository) MigrationsCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MigrationsCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_MigrationsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrationsCount'
type Repository_MigrationsCount_Call struct {
	*mock.Call
}

// MigrationsCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) MigrationsCount(ctx interface{}) *Repository_MigrationsCount_Call {
	return &Repository_MigrationsCount_Call{Call: _e.mock.On("MigrationsCount", ctx)}
}

func (_c *Repository_MigrationsCount_Call) Run(run func(ctx context.Context)) *Repository_MigrationsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_MigrationsCount_Call) Return(_a0 int, _a1 error) *Repository_MigrationsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_MigrationsCount_Call) RunAndReturn(run func(context.Context) (int, error)) *Repository_MigrationsCount_Call {
	_c.Call.Return(run)
	return _c
}

// QueryScalar provides a mock function with given fields: ctx, query, ptr
func (_m *Repository) QueryScalar(ctx context.Context, query string, ptr any) error {
	ret := _m.Called(ctx, query, ptr)

	if len(ret) == 0 {
		panic("no return value specified for QueryScalar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any) error); ok {
		r0 = rf(ctx, query, ptr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_QueryScalar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryScalar'
type Repository_QueryScalar_Call struct {
	*mock.Call
}

// QueryScalar is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - ptr any
func (_e *Repository_Expecter) QueryScalar(ctx interface{}, query interface{}, ptr interface{}) *Repository_QueryScalar_Call {
	return &Repository_QueryScalar_Call{Call: _e.mock.On("QueryScalar", ctx, query, ptr)}
}

func (_c *Repository_QueryScalar_Call) Run(run func(ctx context.Context, query string, ptr any)) *Repository_QueryScalar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any))
	})
	return _c
}

func (_c *Repository_QueryScalar_Call) Return(_a0 error) *Repository_QueryScalar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_QueryScalar_Call) RunAndReturn(run func(context.Context, string, any) error) *Repository_QueryScalar_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMigration provides a mock function with given fields: ctx, version
func (_m *Repository) RemoveMigration(ctx context.Context, version string) error {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMigration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMigration'
type Repository_RemoveMigration_Call struct {
	*mock.Call
}

// RemoveMigration is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
func (_e *Repository_Expecter) RemoveMigration(ctx interface{}, version interface{}) *Repository_RemoveMigration_Call {
	return &Repository_RemoveMigration_Call{Call: _e.mock.On("RemoveMigration", ctx, version)}
}

func (_c *Repository_RemoveMigration_Call) Run(run func(ctx context.Context, version string)) *Repository_RemoveMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RemoveMigration_Call) Return(_a0 error) *Repository_RemoveMigration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RemoveMigration_Call) RunAndReturn(run func(context.Context, string) error) *Repository_RemoveMigration_Call {
	_c.Call.Return(run)
	return _c
}

// TableNameWithSchema provides a mock function with no fields
func (_m *Repository) TableNameWithSchema() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TableNameWithSchema")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Repository_TableNameWithSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TableNameWithSchema'
type Repository_TableNameWithSchema_Call struct {
	*mock.Call
}

// TableNameWithSchema is a helper method to define mock.On call
func (_e *Repository_Expecter) TableNameWithSchema() *Repository_TableNameWithSchema_Call {
	return &Repository_TableNameWithSchema_Call{Call: _e.mock.On("TableNameWithSchema")}
}

func (_c *Repository_TableNameWithSchema_Call) Run(run func()) *Repository_TableNameWithSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_TableNameWithSchema_Call) Return(_a0 string) *Repository_TableNameWithSchema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_TableNameWithSchema_Call) RunAndReturn(run func() string) *Repository_TableNameWithSchema_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
