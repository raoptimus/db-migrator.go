// Code generated by mockery. DO NOT EDIT.

package mockrepository

import (
	context "context"

	connection "github.com/raoptimus/db-migrator.go/internal/dal/connection"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// DSN provides a mock function with given fields:
func (_m *Connection) DSN() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Connection_DSN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DSN'
type Connection_DSN_Call struct {
	*mock.Call
}

// DSN is a helper method to define mock.On call
func (_e *Connection_Expecter) DSN() *Connection_DSN_Call {
	return &Connection_DSN_Call{Call: _e.mock.On("DSN")}
}

func (_c *Connection_DSN_Call) Run(run func()) *Connection_DSN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_DSN_Call) Return(_a0 string) *Connection_DSN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_DSN_Call) RunAndReturn(run func() string) *Connection_DSN_Call {
	_c.Call.Return(run)
	return _c
}

// Driver provides a mock function with given fields:
func (_m *Connection) Driver() connection.Driver {
	ret := _m.Called()

	var r0 connection.Driver
	if rf, ok := ret.Get(0).(func() connection.Driver); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(connection.Driver)
	}

	return r0
}

// Connection_Driver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Driver'
type Connection_Driver_Call struct {
	*mock.Call
}

// Driver is a helper method to define mock.On call
func (_e *Connection_Expecter) Driver() *Connection_Driver_Call {
	return &Connection_Driver_Call{Call: _e.mock.On("Driver")}
}

func (_c *Connection_Driver_Call) Run(run func()) *Connection_Driver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Driver_Call) Return(_a0 connection.Driver) *Connection_Driver_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Driver_Call) RunAndReturn(run func() connection.Driver) *Connection_Driver_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *Connection) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type Connection_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Connection_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *Connection_ExecContext_Call {
	return &Connection_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Connection_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Connection_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Connection_ExecContext_Call) Return(_a0 sql.Result, _a1 error) *Connection_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_ExecContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (sql.Result, error)) *Connection_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields:
func (_m *Connection) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Connection_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *Connection_Expecter) Ping() *Connection_Ping_Call {
	return &Connection_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *Connection_Ping_Call) Run(run func()) *Connection_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Ping_Call) Return(_a0 error) *Connection_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Ping_Call) RunAndReturn(run func() error) *Connection_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *Connection) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type Connection_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Connection_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *Connection_QueryContext_Call {
	return &Connection_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Connection_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Connection_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Connection_QueryContext_Call) Return(_a0 *sql.Rows, _a1 error) *Connection_QueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connection_QueryContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (*sql.Rows, error)) *Connection_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: ctx, txFn
func (_m *Connection) Transaction(ctx context.Context, txFn func(context.Context) error) error {
	ret := _m.Called(ctx, txFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, txFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type Connection_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txFn func(context.Context) error
func (_e *Connection_Expecter) Transaction(ctx interface{}, txFn interface{}) *Connection_Transaction_Call {
	return &Connection_Transaction_Call{Call: _e.mock.On("Transaction", ctx, txFn)}
}

func (_c *Connection_Transaction_Call) Run(run func(ctx context.Context, txFn func(context.Context) error)) *Connection_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *Connection_Transaction_Call) Return(_a0 error) *Connection_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Connection_Transaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *Connection_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewConnection interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnection(t mockConstructorTestingTNewConnection) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
