// Code generated by mockery. DO NOT EDIT.

package mockrepository

import (
	connection "github.com/raoptimus/db-migrator.go/internal/dal/connection"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/raoptimus/db-migrator.go/internal/dal/repository"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: conn, options
func (_m *Factory) Create(conn repository.Connection, options *repository.Options) (repository.Repository, error) {
	ret := _m.Called(conn, options)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 repository.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Connection, *repository.Options) (repository.Repository, error)); ok {
		return rf(conn, options)
	}
	if rf, ok := ret.Get(0).(func(repository.Connection, *repository.Options) repository.Repository); ok {
		r0 = rf(conn, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.Connection, *repository.Options) error); ok {
		r1 = rf(conn, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Factory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Factory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - conn repository.Connection
//   - options *repository.Options
func (_e *Factory_Expecter) Create(conn interface{}, options interface{}) *Factory_Create_Call {
	return &Factory_Create_Call{Call: _e.mock.On("Create", conn, options)}
}

func (_c *Factory_Create_Call) Run(run func(conn repository.Connection, options *repository.Options)) *Factory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Connection), args[1].(*repository.Options))
	})
	return _c
}

func (_c *Factory_Create_Call) Return(_a0 repository.Repository, _a1 error) *Factory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Factory_Create_Call) RunAndReturn(run func(repository.Connection, *repository.Options) (repository.Repository, error)) *Factory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Supports provides a mock function with given fields: driver
func (_m *Factory) Supports(driver connection.Driver) bool {
	ret := _m.Called(driver)

	if len(ret) == 0 {
		panic("no return value specified for Supports")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(connection.Driver) bool); ok {
		r0 = rf(driver)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Factory_Supports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Supports'
type Factory_Supports_Call struct {
	*mock.Call
}

// Supports is a helper method to define mock.On call
//   - driver connection.Driver
func (_e *Factory_Expecter) Supports(driver interface{}) *Factory_Supports_Call {
	return &Factory_Supports_Call{Call: _e.mock.On("Supports", driver)}
}

func (_c *Factory_Supports_Call) Run(run func(driver connection.Driver)) *Factory_Supports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(connection.Driver))
	})
	return _c
}

func (_c *Factory_Supports_Call) Return(_a0 bool) *Factory_Supports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_Supports_Call) RunAndReturn(run func(connection.Driver) bool) *Factory_Supports_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
